{
is_strict: true,
id: "periodic_spawning_enemy_generator",
zorder: "@include data/zorder.cfg:in_front_of_everything",
always_active: true,
hidden_in_game: true,

editor_info: { category: "controllers" },
on_end_anim: "animation('normal')",

//--------------------- Editor properties Init ---------------------------
on_being_added: "[set(x_bound, me.x - 200), set(x2_bound, me.x2 + 200),
                 set(y_bound, me.midpoint_y - 200), set(y2_bound, me.midpoint_y + 200), set(spawn_y, me.midpoint_y + 100)]",

properties: {
  //--------------------------  Editor properties --------------------------
  spawn_type: { type: "string", default: 'slimeman_green_passing', editor_info: { type: "enum", enum_values: ['slimeman_green_passing'] } },
  delay: { type: "int", default: 50, editor_info: { type: "int" } },
  x_bound:  { type: "int", default: 0, editor_info: { type: "x" } },
  x2_bound: { type: "int", default: 0, editor_info: { type: "x" } },
  y_bound:  { type: "int", default: 0, editor_info: { type: "y" } },
  y2_bound: { type: "int", default: 0, editor_info: { type: "y" } },
  spawn_y: { type: "int", default: 0, editor_info: { type: "y" } },
  spawn_from: { type: "string", default: 'front', editor_info: { type: "enum", enum_values: ['front','back'] } },
  

  //--------------------- Properties ---------------------------
  screen_left_side: "int<-level.camera_position[0]-100",
  screen_right_side: "int<-level.camera_position[0] + level.camera_position[2]+100",
  screen_top:	"int<-level.camera_position[1]",
  screen_bottom: "int<-level.camera_position[1]+level.camera_position[3]",
  screen_mid_y: "int<-level.camera_position[1]+level.camera_position[3]/2",

  player_behind: "if(level.player.facing = 1, screen_left_side, screen_right_side)",
  player_front: "if(level.player.facing = 1, screen_right_side, screen_left_side)",
  player_random_side: "if(1d2=2, screen_left_side, screen_right_side)",

  player_within_bounds: "if(level.player.mid_x > x_bound and level.player.mid_x < x2_bound and
                         level.player.mid_y > y_bound and level.player.mid_y < y2_bound, 1, 0)",

  delay_between_spawns:  "delay", // delay between spawns. TODO: may be randomized a little?
},

on_load: "schedule(delay_between_spawns, fire_event('spawn_thing'))",

on_spawn_thing: "[if(spawn_type and player_within_bounds,
                  if(spawn_from='front',  spawn(spawn_type, player_front, spawn_y, -level.player.facing, []),
                                          spawn(spawn_type, player_behind, spawn_y, level.player.facing, []))),
                  schedule(delay_between_spawns, fire_event('spawn_thing'))]",


//--------------------- Animations ---------------------------
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 148,
	y: 228,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},

} // EOF
