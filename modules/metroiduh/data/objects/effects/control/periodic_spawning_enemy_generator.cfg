{
is_strict: true,
id: "periodic_spawning_enemy_generator",
prototype: ["level_area_controller"],
always_active: true,
hidden_in_game: true,

editor_info: { category: "controllers" },
on_end_anim: "animation('normal')",

properties: {
	//--------------------------  Editor properties --------------------------
	spawn_type: { type: "string", default: 'slimeman_green_passing', editor_info: { type: "enum", enum_values: ['slimeman_green_passing'] } },
	delay: { type: "int", editor_info: { type: "int", value: "50" } },
	spawn_y: { type: "int", editor_info: { type: "y", value: "midpoint_y+20" } },
	spawn_from: { type: "string", default: 'front', editor_info: { type: "enum", enum_values: ['front','back'] } },
  

  //--------------------- Properties ---------------------------
  screen_left_side: "int<-level.camera_position[0]-100",
  screen_right_side: "int<-level.camera_position[0] + level.camera_position[2]+100",
  screen_top:	"int<-level.camera_position[1]",
  screen_bottom: "int<-level.camera_position[1]+level.camera_position[3]",
  screen_mid_y: "int<-level.camera_position[1]+level.camera_position[3]/2",

  player_behind: "if(level.player.facing = 1, screen_left_side, screen_right_side)",
  player_front: "if(level.player.facing = 1, screen_right_side, screen_left_side)",
  player_random_side: "if(1d2=2, screen_left_side, screen_right_side)",

  delay_between_spawns:  "delay", // delay between spawns. TODO: may be randomized a little?
},

on_load: "schedule(delay_between_spawns, fire_event('spawn_thing'))",

on_spawn_thing: "[if(spawn_type and player_within_bounds,
                  if(spawn_from='front',  spawn(spawn_type, player_front, spawn_y, -level.player.facing, []),
                                          spawn(spawn_type, player_behind, spawn_y, level.player.facing, []))),
                  schedule(delay_between_spawns, fire_event('spawn_thing'))]",


//--------------------- Animations ---------------------------
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 148,
	y: 228,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},

} // EOF
