{
is_strict: true,
id: "ivan_playable",
prototype: ["player_controlled_platformer_character"],
editor_info: { category: "player" },
zorder: "@include data/zorder.cfg:player",

//--------------------- Init ---------------------------
//on_create: "[ [set(o.always_active, false), set(o.active, false)] where o=(obj periodic_spawning_enemy_generator <- o) where o=filter(level.chars, value.type='periodic_spawning_enemy_generator')[0] ]",
on_enter_level: "animation('stand')",


max_hitpoints: 20,
hitpoints: 20,


//--------------------- Properties ---------------------------
properties: {
	hurt_velocity_y: -800,
	hurt_velocity_x: 800,
	attack_damage: 5,
	damage_cooldown: 10,
	posthit_invicibility_period: 62,
	damage_type: "string :: 'slash'", 
	
	jump_power: "int :: 1200",
	jump_ctrl_x: "int :: 25",
	jump_ctrl_y: "int :: 50",

  //-------------------------- temp vars --------------------------
  _fall_from_ledge: { type: "bool", default: false, persistent: false },

  // Sets new animation, but returns the previous one
  // (useless now, only useful for debug output)
/*  _animation: { variable: true, type: "string", default: "stand", get: "_data",
                 set: "[set(_data, animation), animation(value),
                   debug(_data+'->'+animation),
                 ]",
              },*/

  //-------------------------- Mana --------------------------
  //mana_base_regen_coefficient: "10*(0.5 + if(has_item('lesser_mana_talisman'), 0.3333, 0.0) + if(has_item('greater_mana_talisman'), 0.6667, 0.0))",
  mana_base_regen_coefficient: "decimal :: 10*0.5",
  
  //This is a pretty carefully-tuned non-linear function that makes low levels of mana give much faster regen, so that you're not stuck helpless on levels without base combat available.  The purpose then of mana isn't primarily about "running out", but about keeping high-consumption techniques harder to use.  Basically this makes the ability to use techniques scale with the amount of mana you have, which matters because the actual usefulness value in the game changes accordingly (being able to do a pea-shooter attack is priceless when you have almost no mana)
  mana_regen_per_frame: "decimal :: mana_base_regen_coefficient*max(0.1,((max_mana-(mana/3))/decimal(max_mana))^8)",

},

on_enter_water: "[proto_event('player_controlled_platformer_character', 'enter_water'),
	//set(traction, 2000),
]",
on_exit_water: "[proto_event('player_controlled_platformer_character', 'exit_water'),
	//set(traction, 1000),
]",

//--------------------- on collide ---------------------------
on_collide_head: "set(velocity_y,0)",
on_collide_side: "set(velocity_x,0)",
on_collide_feet: "[
	if(velocity_y>1200 or _fall_from_ledge, sound('land1.wav')), set(velocity_y, 0), set(_fall_from_ledge, false),
	if(animation not in ['hit','jump_hit'], animation('stand')),
]",

//--------------------- Anim control ---------------------------
on_change_animation_failure: "animation(arg.previous_animation)",

on_end_stand_anim: "animation('stand')",
on_end_walk_anim: "animation('walk')",
on_end_walk_stop_anim: "animation('stand')",
on_end_hit_anim: "animation('stand')",
on_end_jump_hit_anim: "animation(if(velocity_y>0, 'fall', if(velocity_y<0, 'jump', 'stand')))",
on_end_jump_anim: "animation('fall')",
on_end_crouch_anim: "animation('crouch')",
on_end_crouch_hit_anim: "animation('crouch')",

//--------------------- on_control ---------------------------
on_ctrl_tongue: "if(animation not in ['hit','jump_hit','crouch_hit'],
	[ sound('swing1.wav'),
		if(animation in ['jump','fall'], animation('jump_hit'), if(animation='crouch', animation('crouch_hit'), animation('hit'))),
	])",

on_ctrl_jump: "if(animation in ['stand','walk','walk_stop','crouch'],
	if(animation='crouch', if(is_standing_on_platform, [set(fall_through_platforms, 10), set(velocity_y, velocity_y + jump_power/10)]),
		[
			animation('jump'), set(velocity_y, -jump_power), // add(velocity_x, velocity_x),
			if(not underwater, spawn('jump_dust_effect', mid_x, solid_rect.y2, -facing)),
		]) )",

//on_ctrl_down: "",
//on_ctrl_up: "set(vertical_look, -100)",
//on_ctrl_attack: "set(vertical_look, 0)",


//--------------------- on_process ---------------------------
on_process: "[
	if((ctrl_left or ctrl_right) and animation in ['stand','walk_stop'], animation('walk')),
	if(animation in ['jump','fall'],
		[if(ctrl_left, [set(facing, -1), add(velocity_x, -jump_ctrl_x)],
			if(ctrl_right, [set(facing, 1), add(velocity_x, jump_ctrl_x)]))],
		//fall from ledge
		if((not is_standing) and animation != 'jump_hit', [set(_fall_from_ledge,true), animation('fall')])
	),
	if(ctrl_down and is_standing and animation not in ['crouch','hit','crouch_hit'], animation('crouch')),
  // debug display
	//if(cycle%5=0, [debug('underwater:'+underwater+' velocity_y:'+velocity_y)]),
	
	//if(underwater and (not underwater_controls), set(underwater_controls, true)),
//  debug(' '+level.camera_position+'----'+level.camera_target),
//  if(cycle%5=0, [debug('accel_x:'+accel_x+' velocity_x:'+velocity_x)]),
]",
on_process_walk: "if(ctrl_left or ctrl_right, set(facing, if(ctrl_left, -1, 1)), animation('walk_stop'))",
on_process_jump: "if(ctrl_jump, [add(velocity_y, -jump_ctrl_y)])", //jump higher when button is hold
on_process_fall: "[ if(time_in_animation=20, set(time_in_animation, 10)) ]", //loop falling frames
on_process_crouch: "[ if(ctrl_left, set(facing, -1), if(ctrl_right, set(facing, 1))),
											if(not ctrl_down, animation('stand')) ]",


//--------------------- Animations ---------------------------
animation: [
  {
    "@base": true,
    image: "characters/ivan.png",
    pad: 3,
    reverse: false,
    accel_y: 80,
//    rotate_on_slope: true,
//    attack_area: "all",
//    body_area: "all",
  },
  {
    id: "stand",
    rect: [1,1,20,41],
    solid_area: [1,2,15,40],
    body_area:  [1,2,15,40],
    duration: 6,
    frames: 5,
    accel_x: 0,
  },
  {
    id: "walk",
    rect: [1,45,29,85],
    solid_area: [9,2,23,40],
    body_area:  [9,2,23,40],
    duration: 3,
    frames: 10,
    accel_x: 1500,
  },
  {
    id: "walk_stop",
    rect: [119,1,144,41],
    solid_area: [4,2,18,40],
    body_area:  [4,2,18,40],
    duration: 4,
    frames: 4,
    accel_x: 0,
  },
  {
    id: "hit",
    rect: [1,89,35,129],
    solid_area: [2,2,16,40],
    body_area:  [2,2,16,40],
    duration: 3,
    frames: 4,
    attack_area: [17,13,35,22],
    accel_x: 0,
  },
  {
    id: "jump_hit",
    rect: [1,180,35,222],
    solid_area: [2,2,16,40],
    body_area:  [2,2,16,40],
    duration: 3,
    frames: 4,
    attack_area: [17,12,35,21],
  },
  {
    id: "jump",
    rect: [1,133,32,176],
    solid_area: [8,3,22,41],
    body_area:  [8,3,22,41],
    duration: 5,
    frames: 3,
  },
  {
    id: "fall",
    rect: [36,133,67,176],
    solid_area: [8,3,22,41],
    body_area:  [8,3,22,41],
    duration: 5,
    frames: 4,
  },
  {
    frames_per_row: 5,

    id: "crouch",
    rect: [1,226,20,266],
    solid_area: [1,10,15,40],
    body_area:  [1,10,15,40],
    duration: 6,
    frames: 5,
    accel_x: 0,
  },
  {
    frames_per_row: 4,

    id: "crouch_hit",
    rect: [1,270,35,310],
    solid_area: [2,10,16,40],
    body_area:  [2,10,16,40],
    duration: 3,
    frames: 4,
    attack_area: [17,19,35,28],
  },

],

} //EOF
