{
/*Implementor requires "walk" and "turn" animations.
Commands:	begin_pacing - Paces to and fro the limits set in the editor.
			begin_walking - Walks fowards forever.
*/
is_strict: true,
id: "walking_npc",
prototype: ["standing_npc"],
zorder: "@include data/zorder.cfg:npc",
friction: 1000,
traction: 1000,

editor_info: {
	category: "NPCs",
	help: "start mode: Action to start the level in.\nturns_at_cliff: If true, the object will turn before it falls off a cliff. Doesn't apply to walking into one.\npotters: The object will sort of faff about a bit.\npotter_timeout: Number of frames the object will faff about for. Frogatto runs af 50 frames per second.",
	var: [{
		name: "min_x",
		value: "midpoint_x - 200",
		type: "x",
	},{
		name: "max_x",
		value: "midpoint_x + 200",
		type: "x",
	},{
		name: "start_mode",
		type: "enum",
		value: "'walk'",
		enum_values: ["stand","walk"],
	},{
		name: "turns_at_cliff",
		type: "boolean",
		value: true,
	},{
		name: "potters",
		type: "enum",
		value: "'never'",
		enum_values: ["never","limits","always"]
	},{
		name: "potter_timeout",
		type: "int",
		value: "100",
	},],
},

properties: {
	"begin_pacing": "def() [
		set('start_mode','walk'),
		set(self.vars.target, null),
		set(self.vars.turns, true)]",
		
	"begin_walking": "def() [
		set('start_mode','walk'),
		set(self.vars.target, null),
		set(self.vars.turns, false)]",
		
	"pace_to": "def(new_min_x, new_max_x) [
		if(new_min_x < new_max_x, [
			set(self.vars.min_x, new_min_x),
			set(self.vars.max_x, new_max_x),
			],[
			set(self.vars.min_x, new_max_x),
			set(self.vars.max_x, new_min_x),
			]),
		self.begin_pacing()]",
		
	"walk_to": "def(target_x, callback=null) [
		set(self.vars.target, target_x),
		set(self.vars.target_callback, callback),
		set(self.vars.start_mode, 'walk')
		]",

	potter: "def() [if(1d2,stand(),turn()), if(level.cycle - last_started_pottering > potter_timeout, set(last_started_pottering,level.cycle))]",
		
	regular_behavior: "def() if(start_mode = 'stand', stand(), walk())",
	
	walk: "def() if(should_turn, if(should_potter, potter(), turn()),
					if(should_potter, potter(),
						animation('walk') ))",
	
	should_turn: "if(not target, if(turns_at_cliff and distance_to_cliff < cliff_margin,1,
						if(outside_limits,1,0))
							where margin = 50
							where cliff_margin = 110,
					/* if we DO have a target, then all the above rules are off; go ahead and walk off cliffs, or leave our bounds, the target is more important.*/
					if((target < self.mid_x and facing > 0) or (target > self.mid_x and facing <= 0), 1, 0))",
							
	should_potter: "if(target, 0,  /*if we have a target, don't potter at all*/
						if(level.cycle - last_started_pottering < potter_timeout, 1, if(1d2-1, if(potters = 'always', 1, if(potters = 'limits' and outside_limits, 1,0)))))",
	
	outside_limits: "if(turns,
				if(facing > 0,
					if(mid_x + margin > max_x, 1, 0), 
					if(mid_x - margin < min_x, 1, 0)),
			)",
	
	turn: "def() [animation('turn'), set(facing, -facing)]",
	
	is_at_target: "if(self.vars.target and ((self.vars.target < self.mid_x and facing > 0) or (target > self.mid_x and facing <= 0)), 1, 0)",
	
	walking_animations: "['walk']", //For internal reasons, you must supply a list of walking animations. (I can't seem to test for 'walk' in animation name.)
	},
	
vars: {
	"turns": true,					//Turns at editor-set limits.
	"target": null,					//If we are walking to a target, this is it.
	"target_callback": null,		//The event to fire, when we reach the target. (Will be fired in addition to reach_target.)
	},

consts: {"can_walk": true},

on_create: "regular_behavior()",
on_end_anim: "if(not animation in ['stand','turn','walk'],animation(animation),   if(_paused, stand(),regular_behavior()))",
			/*if we're doing some special animation, like the butler-kitty, we're expected to self-handle termination*/
					
on_resume: "regular_behavior()",

on_process: "[if(animation in walking_animations,
					if(self.is_at_target, fire_event(self,'reach_target') ))]",


//note - it's REALLY important that target_callback be last - if this gets fired during a dialogue, the other commands after target_callback don't get executed until the dialogue is finished (which essentially breaks target-seeking entirely)	
on_reach_target: "[[set(self.vars.start_mode, 'stand'),stand()], set(self.vars.target,null)
, target_callback]",

}
