{
/*Implementor requires "stand" animation.
Properties:	stand - The character starts standing in one place.
*/
is_strict: true,
id: "standing_npc",
prototype: ["standard_values"],
zorder: "@include data/zorder.cfg:npc",

collide_dimensions: ["~npc"],
solid_dimensions: ["~npc"],

editor_info: { category: "NPC" },


properties: {
#--------------------------  editor items --------------------------#
  start_mode: { type: "string", default: 'stand', editor_info: { type: "enum", enum_values: ['stand'] } },
  default_speech_text: { type: "string", default: 'Hello there.', editor_info: { type: "string" } },
  turning_behaviour: { type: "string", default: 'face_player', editor_info: { type: "enum", enum_values: ['face_player','random','never'] } },

#-------------------------- core functionality --------------------------#
	record_having_conversation__section: "def(int section) -> commands level.player.store_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id, 1)",
	had_conversation_with_me_already__section: "def(int section)  -> bool if(level.player.get_stored_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id) = 1, true, false)",

	//shadow_size: "string :: 'medium_small'",
	"stand": "def()  -> commands animation('stand')",
	"pause": "def()  -> commands [animation('stand'), set(_paused,true)]",
	"resume": "def() -> commands [fire_event('resume'), set(_paused,false)]",

	_paused: { type: "bool", default: false},	
},

consts: {"can_stand": true},

on_create: "[if(start_mode, animation(start_mode), stand()), /*if(shadow_size, spawn('shadow_'+shadow_size,mid_x,mid_y,1,set(child.parent, me)))*/ ]",

on_end_stand_anim: "[
		animation('stand'),
		switch(turning_behaviour,
			'face_player', set(facing, if(level.player.x < x, -1, 1)),
			'random', if(not 1d2-1, set(facing, 1d2-1)),
			/*'never',*/ null, //Uncomment this when all NPCs actually have turning_behaviour set. It should enforce the turning behaviour variable by crashing if it's not set, or set incorrectly. I believe this behaviour to be the most correct, since when errors occur it'll fail fast.
		)
	]",
	

//--------------------- Interacion ---------------------------
on_interact: "[
	//set(level.zoom, 2), 
	pause(),
	set(level.player.control_lock, ['ctrl_left']), 
	
	//set(level.player.is_running, false) asserting level.player is obj player_controlled_platformer_character, 
	schedule(20, 
		fire_event('have_distance')),
	]",

on_have_distance: "[
	set(level.player.control_lock, ['ctrl_right']), 
	schedule(2, 
		fire_event('start_talking')),
	]",

on_start_talking: "[
	set(level.player.control_lock, null), 
	fire_event('talk'), 
	set(level.zoom, 1),
	resume(),
	]",

on_talk: "if(default_speech_text, speech_dialog(self, [default_speech_text]))",
}
