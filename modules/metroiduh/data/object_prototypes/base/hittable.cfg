{
is_strict: true,
id: "hittable",
prototype: ["standard-values"],

friction: 2000,
#traction_in_water: 1000,
#affected_by_currents: true,

max_hitpoints: 10,
hitpoints: 10,
invincible: false,

//solid_dimensions: ["s1"], // all objects with the same solid area name will bump to each other and cannot pass through
collide_dimensions: ["player","~enemy","~hazard"], // on_collide_object_body will trigger on any overlap between objects with the same collide area name
mass: 5,

properties: {
  //--------------------- Constants ---------------------------
  team: "string :: 'evil'", // hittable objects are evil by default
  hurt_velocity_y: "int :: -400",
  hurt_velocity_x: "int :: -200",
	attack_damage: "int :: 0", // how much I hit others
  posthit_invicibility_period: "int :: 0",
	damage_cooldown: "int :: 0",
	points_value: "int :: 0", // score value of my life
	flinch_threshold: "int :: 3",

  //--------------------------  vars --------------------------
	time_last_hit: { type: "int", default: 0, persistent: false },

  //-------------------------- temporary vars --------------------------
  //_in_solidity_fail: { type: "bool", default: false, persistent: false },
  //_last_played_pain_sfx: { type: "int", default: 0, persistent: false },


  // invincibility
	is_invincible_posthit: "bool :: if(time_last_hit and (abs(time_last_hit - me.cycle) < posthit_invicibility_period), true, false)",
	is_invincible: "bool :: if(invincible or level.in_dialog or is_invincible_posthit, true, false)",
  
  //-------------------------- generic helper functions --------------------------
	facing_towards_player: "bool :: facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",


  //-------------------------- behavior handlers --------------------------
  // anims/movement
  handle_special_damage_response: "def(obj hittable|null collide_with) -> commands null #virtual#", //meant for unique actions upon taking damage, like losing wings.  Also for special type-based behavior that happens regardless of damage amount (such as maybe a feathered creature having its feathers burned off and effectively turning into a different, flightless enemy type).
  handle_flinch: "def(obj hittable collide_with) -> commands
      execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
  cause_flinch: "def(obj hittable|null collide_with) -> commands execute(me, [
      add(me.velocity_x,me.hurt_velocity_x * sign(me.midpoint_x - if(collide_with, collide_with.midpoint_x, 0))), 
      add(me.velocity_y,me.hurt_velocity_y),
      cause_hurt_anim(collide_with)
      ])",
  cause_hurt_anim: "def(obj hittable|null collide_with) -> commands execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",


//--------------------- Cosmetic functions ---------------------------

  flash_transp: "def() -> commands [set(me.alpha, 32)]",
  flash_transp_off: "def() -> commands [set(me.alpha, 255)]",
  flash_white_solid: "def() -> commands [set(me.brightness, 32640)]", // 255*128
  flash_black_solid: "def() -> commands [set(me.brightness, 0)]",
  flash_bright: "def() -> commands [set(me.brightness, 1023)]",
  flash_dark: "def() -> commands [set(me.brightness, 10)]",
  flash_red: "def() -> commands [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
  flash_off: "def() -> commands [set(me.brightness, 255), set(me.red, 255), set(me.green, 255), set(me.blue, 255)]",

  display_posthit_invincibility_flash_sequence: "def() -> commands if(posthit_invicibility_period, 
    map(range(me.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(me.alpha,50),set(me.alpha,255))) ))",


  flash_sequence_invincible: "def() -> commands	[	flash_bright(),
                              schedule(5, flash_off()),
                              schedule(6, flash_bright()),
                              schedule(8, flash_off())]",

  flash_sequence_hurt: "def() -> commands	[	flash_bright(),
                        schedule(5, flash_dark()),
                        schedule(10, flash_bright()),
                        schedule(15, flash_dark()),
                        schedule(20, flash_bright()),
                        schedule(25, flash_dark()),
                        schedule(30, flash_off())]",

#                        schedule(3, flash_red()),
#                        schedule(6, flash_bright()),
#                        schedule(9, flash_red()),
#                        schedule(12, flash_bright()),
#                        schedule(15, flash_off())]",
}, //end of properties

//--------------------- Collision handlers ---------------------------
on_outside_level: "[if(y > level.dimensions[3], add(hitpoints,-1))]",

//debug
on_collide_object_body: "debug('on_surface_damage: '+me.type)", //me.type, arg.collide_with.type, arg.collide_with_area including 'body', 'attack', 'thrown'
on_surface_damage: "debug('on_surface_damage: '+me.type)",
on_collide_damage: "debug('on_collide_damage: '+me.type)",
on_get_hit: "debug('on_get_hit: '+me.type)",

//--------------------- on_process ---------------------------
on_process: "[]",

} //EOF
