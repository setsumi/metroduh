{
is_strict: true,
id: "hittable",
prototype: ["standard_values"],

friction: 2000,
//traction_in_air: 1000,
//traction_in_water: 1000,
//affected_by_currents: true,
max_hitpoints: 10,
hitpoints: 10,
invincible: false,

//solid_dimensions: ["s1"], // all objects with the same solid area name will bump to each other and cannot pass through
collide_dimensions: ["player","~enemy","~hazard"], // on_collide_object_body will trigger on any overlap between objects with the same collide area name
mass: 5,

properties: {
  //--------------------- Constants ---------------------------
  team: "string :: 'evil'",            // hittable objects are evil by default
  hurt_velocity_y: "int :: 0",
  hurt_velocity_x: "int :: 0",
  damage_type: "string :: 'neutral'",  // options include: neutral(default no sound), bite, stab, slash, organic-bludgeon
  attack_knockback: "int :: 0",
  attack_damage: "int :: 0",
  armor: "int :: 0",                   // receive no damage if armor is higher than damage
  posthit_invicibility_period: "int :: 0",
  damage_cooldown: "int :: 0",
  points_value: "int :: 0",            // score value of my life
  flinch_threshold: "int :: 3",

  //--------------------------  vars --------------------------
  time_last_hit: { type: "int", default: 0, persistent: false },

  //-------------------------- temporary vars --------------------------
  _last_played_pain_sfx: { type: "int", default: 0, persistent: false },
  //_in_solidity_fail: { type: "bool", default: false, persistent: false },


#--------------------------  core behavior handlers --------------------------#	
	get_hit_by: "def(obj hittable collide_with) -> commands execute(me, [
						handle_special_damage_response(collide_with),
	
						if((collide_with.attack_damage > 0) and collide_with.hitpoints > 0 and ( collide_with.damage_cooldown < (cycle - time_last_hit)),
							[display_hurt_visuals(collide_with),
							
							if((not is_invincible) and collide_with.attack_damage > armor,
									[display_posthit_invincibility_flash_sequence(),
									handle_flinch(collide_with),
									handle_damage(collide_with),
									set(time_last_hit, me.cycle),
									])]),
						
						handle_knockback(collide_with)])",
						
	get_hit_sourceless: "def(int damage_amount) -> commands execute(me,  /*take damage and invoke the usual behavior, but without any influence (e.g. amount, etc) from a source.
														   This almost universally should be used for e.g. being stomped on, or other self-determined damage amounts (falling?).
														   We've chosen to do this separately because so much of get_hit_by's internals have collide_with baked in as an assumed reference,
														   and we're looking to just -omit-, rather than override, most of them.*/
						if((not is_invincible) and (damage_amount >= armor),
								[display_hurt_visuals(null),
								display_posthit_invincibility_flash_sequence(),
								handle_damage_sourceless(damage_amount),
								set(time_last_hit, me.cycle),
								]))",


  //-------------------------- generic helper functions --------------------------
	facing_towards_player: "bool :: facing = if(level.player.midpoint_x < self.midpoint_x, -1, 1)",


  //-------------------------- behavior handlers --------------------------
  // anims/movement
  handle_special_damage_response: "def(obj hittable|null collide_with) -> commands null #virtual#", //meant for unique actions upon taking damage, like losing wings.  Also for special type-based behavior that happens regardless of damage amount (such as maybe a feathered creature having its feathers burned off and effectively turning into a different, flightless enemy type).
  handle_flinch: "def(obj hittable collide_with) -> commands
      execute(me, if(collide_with.attack_damage >= flinch_threshold, cause_flinch(collide_with)))",
  cause_flinch: "def(obj hittable|null collide_with) -> commands execute(me, [
      add(me.velocity_x,me.hurt_velocity_x * sign(me.midpoint_x - if(collide_with, collide_with.midpoint_x, 0))), 
      add(me.velocity_y,me.hurt_velocity_y),
      cause_hurt_anim(collide_with)
      ])",
  cause_hurt_anim: "def(obj hittable|null collide_with) -> commands execute(me, if('hurt' in available_animations,set(me.animation, 'hurt')))",

  // damage
  handle_damage_type_modifications: "def(int amount) -> int amount #virtual#",  //meant for applying any kind of arithmetic to the raw damage amount, based on type.
  handle_base_damage_reductions: "def(int amount) -> int amount #virtual#",  //meant for flat, type-agnostic reductions to ALL damage.
  final_damage_amount: "def(int damage_amount) -> int if((damage_amount < armor) or me.is_invincible, 0, handle_damage_type_modifications( handle_base_damage_reductions( damage_amount )))",
  will_be_dead: "def(int damage_amount) -> bool ((me.hitpoints - damage_amount) <= 0)",
  
  handle_damage_sourceless: "def(int dmg) -> commands execute(me,[if(will_be_dead(dmg), handle_death(null)), add(me.hitpoints, - final_damage_amount(dmg))])",
  handle_damage: "def(obj hittable collide_with) -> commands execute(me,[if(will_be_dead(dmg), handle_death(collide_with)), add(me.hitpoints, - dmg)]) where dmg = final_damage_amount(collide_with.attack_damage)",
  handle_knockback: "def(obj hittable collide_with) -> commands execute(me,add(velocity_x, collide_with.facing * collide_with.attack_knockback))",
  
  // death
  should_track_death: "bool :: false", //tracking is for achievements
  handle_death: "def(obj hittable|null collide_with) -> commands [
      add(level.player.score,points_value),
      if(not acquirable_item_drop_value = null,drop_acquirable_items()),
      if(should_track_death, level.player.register_kill(me)),
      if(me.corpse_object_type, spawn_corpse),
      
      death_effects(if(collide_with is obj hittable and collide_with.damage_type, collide_with.damage_type, death_fx_type))
      ] asserting level.player is obj player_controlled",
  					
	death_fx_type: "string :: 'medium'",
  corpse_object_type: "string|null :: null",
  spawn_corpse: "commands :: if(corpse_object_type is string, spawn(corpse_object_type, mid_x, mid_y, facing))",
  

  // invincibility
	is_invincible_posthit: "bool :: if(time_last_hit and (abs(time_last_hit - me.cycle) < posthit_invicibility_period), true, false)",
	is_invincible: "bool :: if(invincible or level.in_dialog or is_invincible_posthit, true, false)",


//-------------------------- item drop logic --------------------------
  drop_item_list: "{string -> int} :: sans_undroppables(_drop_item_list)",
  drop_item_weights: "{string -> int} :: sans_undroppables(_drop_item_weights)",
  _drop_item_list: "{string -> int} :: {'heart_object' : 10, 'mana_cube' : 7}",
  _drop_item_weights: "{string -> int} :: {'heart_object' : 30, 'mana_cube' : 70}",
  drop_item_validity: "{string -> bool} :: {'heart_object' : (not level.player.hitpoints = level.player.max_hitpoints),  'mana_cube' : true }",
  acquirable_item_drop_value: "int :: 0",  //how many of the dropped items the dying monster/thing is worth.
  sans_undroppables: "def({string -> int} source) -> {string -> int} filter(source, drop_item_validity[key])",
  
  
  choose_drop_item_nonweighted: "string :: choose(keys(drop_item_list))",  //unused but useful reference
  choose_drop_item_weighted: "string :: search_drop_list(drop_item_weights, 0, 0, 1d(sum(values(drop_item_weights)))) ",
  search_drop_list: "def({string -> int} thelist, int i, int tally, int target_val) -> string if(tally >= target_val, keys(thelist)[i-1], search_drop_list( thelist, i+1, tally + values(thelist)[i], target_val))",
  
  calculate_drop_items: "def(int value_left, [string] toBeDropped) -> [string]
      if( anything_can_still_be_dropped, calculate_drop_items(value_left - drop_item_list[picked], toBeDropped + [picked]), toBeDropped)
        where picked = choose_drop_item_weighted
        where anything_can_still_be_dropped = (find(values(drop_item_list), value <= value_left) != null)",
  drop_acquirable_items: "def() -> commands if(1d4=4,
      map(calculate_drop_items(me.acquirable_item_drop_value,[]), spawn(value, me.mid_x, me.y, me.facing,[set(child.velocity_x, velocity_x/6 +1d600-300), set(child.velocity_y, velocity_y/6)])))",



//--------------------- Cosmetic functions ---------------------------
  display_posthit_invincibility_flash_sequence: "def() -> commands null",
/*  display_posthit_invincibility_flash_sequence: "def() -> commands if(posthit_invicibility_period, 
    map(range(me.posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0,set(me.alpha,50),set(me.alpha,255))) ))",
*/

  flash_transp: "def() -> commands [set(me.alpha, 32)]",
  flash_transp_off: "def() -> commands [set(me.alpha, 255)]",
  flash_white_solid: "def() -> commands [set(me.brightness, 32640)]", // 255*128
  flash_black_solid: "def() -> commands [set(me.brightness, 0)]",
  flash_bright: "def() -> commands [set(me.brightness, 1023)]",
  flash_dark: "def() -> commands [set(me.brightness, 10)]",
  flash_red: "def() -> commands [set(me.red, 255),set(me.green, 100), set(me.blue, 100)]",
  flash_off: "def() -> commands [set(me.brightness, 255), set(me.red, 255), set(me.green, 255), set(me.blue, 255)]",

  // immune to damage flash
  invincible_flash_sequence: "def() -> commands	[flash_bright(),
      schedule(5, flash_off()),
      schedule(6, flash_bright()),
      schedule(8, flash_off())]",
      
  // hurt flash
  hurt_flash_sequence: "def() -> commands	[flash_bright(), schedule(posthit_invicibility_period, flash_off())]",
	
	display_hurt_visuals: "def(obj hittable|null collide_with) -> commands execute(me, 
					if(collide_with is obj hittable,
						[if(dmg > 0, [hurt_flash_sequence(),play_hurt_sounds(collide_with.damage_type, dmg)], invincible_flash_sequence())] where dmg = final_damage_amount(collide_with.attack_damage),
						
						[hurt_flash_sequence(),
						play_haptic_effect('rumble'),
						play_hurt_sounds('neutral', 0)
						])
					)",

		//these should be the material-interaction sounds of an object being damaged; wood crunching, flesh squishing, glass breaking, etc.  A certain material will make different noise depending on what hurts it, and that's what this handles - wood burning is a very different sound from wood being crushed.  By default we provide a set of sounds for fleshy objects.									
	play_hurt_sounds: "def(string damage_type, decimal damage_amount) -> commands [if(play_object_specific_hurt_sounds(damage_type, damage_amount) != null, play_object_specific_hurt_sounds(damage_type, damage_amount),
								switch(damage_type,
									'bite', sound('hurt-bite'+1d1+'.wav'),
									'stab', sound('hurt-stab'+1d1+'.wav'),
									'slash', sound('hurt-slash'+(1d1+0)+'.wav'),
									'organic-bludgeon', sound('hurt-organic-bludgeon.wav'),
									'neutral', null
								)),
								if(should_play_pain_sfx,[play_object_specific_pain_vocalization(damage_type, damage_amount), set(_last_played_pain_sfx,cycle)])]
									where should_play_pain_sfx = (cycle >= (_last_played_pain_sfx + 28))",
								
		//override this to allow an object to have its own specific material sounds
	play_object_specific_hurt_sounds: "def(string damage_type, damage_amount) -> commands switch(damage_type, 
									'neutral', null,
								null)",
	
		//generally speaking, these sounds should not differ between damage types.	If a creature yelps in pain, it should always sound the same.  We might want it to be a matter of magnitude, though.						
	play_object_specific_pain_vocalization: "def(string damage_type, damage_amount) -> commands null",


  // death effects
	death_effects: "def(string type) -> commands
			if(me.underwater, []/*splash_effect()*/,

			(switch(type,
//					/*these are a set of effects based on the type of creature dying*/
//					'bug', [vfx('die_cloud_puffy'), sound('death-crunch'+1d2+'.wav')],
//					'mushroom', [vfx('die_cloud_evaporative'), sound('death-crunch'+1d2+'.wav')],
//					'plant', [vfx('die_cloud_evaporative'), sound('Death-Plant-Short'+1d5+'.wav')],
//					'animal', [vfx('die_cloud'), sound('death-crunch'+1d2+'.wav'), spawn_gibs('bone_straight',1d2), spawn_gibs('bone_skull',1)],
//					'milgramen', [vfx('die_cloud'), sound('Milgramen-Explode'+1d5+'.wav')],
//
//					/*a set of effects based on the damage source; elsewhere in hittable these actually overrule the creature-type*/
//					'fire', [vfx('die_cloud_fire'), sound('death-acid'+1d5+'.wav')],
//					'acid', [repeat_fx('die_cloud_acid_small',10,6,30,30,null), sound('death-acid-bubbly1.wav')],
//					'energy', [repeat_fx('die_cloud_electric_medium',1d2+5,4,20,30, null),repeat_fx('electric_spark1',3+1d3,1,60,60,null), sound('death-acid'+1d5+'.wav')],
//					
//					/*generic recurring effects for miscellaneous things - often not actually enemies*/
//					'small', repeat_fx('die_cloud_small',5,4,10,10, null),
					'medium', repeat_fx('die_cloud_medium',5,4,20,30, null),
//					'large', repeat_fx('die_cloud',5,10,50,70, sound('splat.ogg')),
//					
//					/*special custom effects for bosses*/
//					'mushroom-boss', repeat_fx('die_cloud_evaporative',40,10,70,120, sound('death-crunch'+1d2+'.wav')),
			)
			where repeat_fx = def(string obj_type, int count, int delay, int spread_x, int spread_y, commands do_sound) -> commands spawn('particle_system_holder', me.mid_x, me.mid_y, if(1d2=2,-1,1), 
				execute(child, map(range(count),schedule(value*delay, [child.set_time_to_live(count*(delay+1)), vfx_spread(obj_type,spread_x,spread_y), do_sound ]))))
			
			
			) where vfx = def(string obj_type) -> commands spawn(obj_type, me.mid_x, me.mid_y, if(1d2=2,-1,1)))
			where vfx_spread = def(string obj_type, int spread_x, int spread_y) -> commands spawn(obj_type, me.mid_x + 1d(spread_x) - 1d(spread_x), me.mid_y  + 1d(spread_y) - 1d(spread_y), if(1d2=2,-1,1))
			",

	//spawn_gibs: "def(string variation_type, int count) -> commands map([0]*count, spawn('bouncing_debris_chunk',x+1d10, y+1d10, if(1d2=2,1,-1), [add(child.variations, [variation_type]),child.init_vel('burst')]))",

	splash_effect: "def() -> commands if(me.underwater and me.water_bounds,
					[if(/*abs(me.water_bounds[1] - me.midpoint_y) > 40*/ true,
						//spawn('water_splash_underwater_big', me.mid_x, me.mid_y, if(1d2=2,me.facing,-me.facing)),
						spawn('water_splash', me.midpoint_x, me.water_bounds[1]-40, if(1d2=2,me.facing,-me.facing))),
					/*sound('water-enter.ogg'),*/ ])",


}, //end of properties


//-------------------------- Collision event handling --------------------------

	on_enter_water: "splash_effect()",

  on_outside_level: "[if(y > level.dimensions[3], add(hitpoints,-1))]",

  //me.type, arg.collide_with.type, arg.collide_with_area including 'body', 'attack', 'thrown'
  
  //this is meant to ensure we don't take multple instances of damage from a damage type that's a "stream" in a single frame.  If we get hit, we check for other collisions with the same kind of shot, and only take damage from the first one.
  //we double-check it's the same collide-with area, because we DO want multiple collisions from an object for each different area; we use this on e.g. the milgram-pod to allow it to be shot out of the air by the player (needs a body area and a thrown area during the thrown anim, rather than the usual "only the thrown area" for player-spat objects).  This mechanism may be the ideal place to check for 'armored regions' on an otherwise vulnerable creature; check if we're getting a collision on both the body and the armor.
  //TODO:  this may be unwanted on shots without a cooldown, where a "shotgun" effect of multiple hits is desired.
  on_collide_object_body: "if(arg.collide_with is obj hittable, if(not  find(   filter(arg.all_collisions, value.collide_with.type = arg.collide_with.type and value.collide_with_area = arg.collide_with_area), value.collision_index < arg.collision_index), process_collision)
      //two special exceptions here besides the 'no friendly-fire' rule;
      // evil_harmless is a special team for thrown enemies wherein they can't hurt anyone, regardless of the target's team, but also - stuff from team 'evil' won't friendly-fire them.  They can and will be hurt by any player actions, though, and any traps/neutral damage sources.
      where process_collision = if(arg.collide_with.team != team and arg.collide_with.team != 'evil_harmless' and (not (arg.collide_with.team = 'evil' and team = 'evil_harmless')), if(arg.collide_with_area in ['attack','thrown'], get_hit_by(arg.collide_with))))",


//debug
on_surface_damage: "debug('on_surface_damage: '+me.type)",
on_collide_damage: "debug('on_collide_damage: '+me.type)",
on_get_hit: "debug('on_get_hit: '+me.type)",

//--------------------- on_process ---------------------------
on_process: "[]",

} //EOF
