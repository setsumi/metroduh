//Additional functions for math.
{
	

interpolate: "overload(
	/* Given a start, a percentage, and an end; return the appropriate in-between value. 
		For example, interpolate(5, 0.5, 0) would return 2.5.
		interpolate(level.player, 0.75, [0,0]) would return a point half-way three quarters of the way between you and the point of origin.
		Given a list of things and a percentage, return the thing (a point or decimal) that is percent of the way along the list. All points are weighted evenly.
		For example, between 0.0 and 1.0 for [1,3,1], we'd have the following values returned: 
			[1.0, 1.4, 1.8, 2.2, 2.6, 3.0, 2.6, 2.2, 1.8, 1.4, 1.0]
		Syntax: interpolate(list_of_stops, percent). Stops can be points, as well.
	*///3 ARITY
	def(decimal begin, decimal percentage, decimal end) -> decimal 
		tween(end, begin, percentage),
		
	def([decimal] begin, decimal percentage, [decimal] end) -> [decimal] 
		[decimal] <- tween(end, begin, percentage) //The base case, where we just tween between the two.
			asserting size(begin) = size(end) 
			          | {begin:begin, end:end},
			          
	(def([decimal] begin, decimal percentage, object|map end) -> map 
		({mid_x:x_, mid_y:y_, 0:x_, 1:y_} where    //Extract and tween.
			x_ = tween(decimal <- end.mid_x, begin[0], percentage), 
			y_ = tween(decimal <- end.mid_y, begin[1], percentage)) 
			asserting end.mid_x != null, 
			          end.mid_y != null, 
			          size(begin)=2 
			          | {begin:begin, end:end}),
			          
	(def(object|map begin, decimal percentage, [decimal] end) -> map 
		({mid_x:x_, mid_y:y_, 0:x_, 1:y_} where 
			x_ = tween(end[0], decimal <- begin.mid_x, percentage), 
			y_ = tween(end[1], decimal <- begin.mid_y, percentage)) 
			asserting begin.mid_x != null, 
			          begin.mid_y != null, 
			          size(end)=2 
			          | {begin:begin, end:end}),
			          
	(def(object|map begin, decimal percentage, object|map end) -> map {
		mid_x:tween(decimal <- end.mid_x, decimal <- begin.mid_x, percentage), 
		mid_y:tween(decimal <- end.mid_y, decimal <- begin.mid_y, percentage)
		} asserting begin.mid_x != null, 
		            end.mid_x != null, 
		            begin.mid_y != null, 
		            end.mid_y != null),
		            
	//2 ARITY
	def({decimal -> decimal} targets, decimal step) -> decimal 
		//We'll take the list of points as verticies connected by edges (think fence-posts). Each edge has two verticies, and we'll tween between those.
		(tween(targets[second_key], targets[first_key], (step-first_key)/total_range) where 
			total_range = second_key - first_key where first_key=decimal(min(keys(targets))), 
			second_key = decimal(max(keys(targets))) 
		) asserting size(targets) = 2,
		
	(def([object|map|[decimal]]|[decimal] targets, decimal step) -> decimal|[decimal]|map 
		interpolate(
			object|map|[decimal]|decimal <- targets[chunkIndex], 
			chunkPercent, 
			object|map|[decimal]|decimal <- if(size(targets)!=chunkIndex+1, 
			                                   targets[chunkIndex+1], 
			                                   targets[chunkIndex])
		) where chunkIndex = int(expandedPercent), 
		        chunkPercent = tenth(expandedPercent)
		        where expandedPercent = step*(size(targets)-1)) 
		        
) where tween = overload(
	
	def(decimal list_one, decimal list_two, decimal percent_raw) -> decimal 
		//Percent_raw may be ever so slightly above 1 or below 0, depending on some less-than-percise math elsewhere. For example, the camera controller will ask for percent 1.0005 on its last frame.
		(list_one*(percent) + list_two*(1.0-percent)) where percent = constrain(0, percent_raw, 1),
	
	def([decimal] list_one, [decimal] list_two, decimal percent_raw) -> list 
		//Same as before, but now combine each element of both lists weighted by percent.
		zip(list_one, list_two, 
			a*percent + b*(1.0-percent)
		) where percent = lib.math.constrain(0, percent_raw, 1)
)",


//The mod operator, %, only works on integers. This function gives the decimal component of a number as a partial workaround.
tenth: "def(decimal a) -> decimal a-int(a)", //Returns the number to the right of the decimal place. eg, ±2.4→±0.4.


//Force the 2nd arg to be between the first and third arg, or at least as in-between as possible.
//The failure mode, 'center it', comes in to play when the minimum number is larger than the maximum.
//This is especially handy when dealing with variable-width GUIs, when you want something in the middle of a rectangular window with 100px of padding – or just in the center, if the 100px isn't available. While we could assert, it's less than helpful when your program crashes because someone's screen is too small.
constrain: "def(decimal min, decimal var, decimal max) -> decimal 
	if(min > max, (min+max)/2, if(min > var, min, if(max < var, max, var)))",
	

//Useful for normalizing when adding the degrees of a circle together. Always returns a positive.
//Example use: We want a value between 0° and 360°, so we can divide by 360.0° and tell how much of a percent around a circle we are. Say, for a dial control.
//Our equation is 45+90+90+180 degrees. loop returns 45 degrees, so we know we're 12.5% the way around our circle.
loop: "overload(
	def(decimal a) -> decimal loop(a, 360),
	def(decimal a, decimal lim) -> decimal (lim+a%lim)%lim
)",


in_range: "def(decimal min, decimal var, decimal max) -> bool not var < min or var > max",

//In Anura, often we want symmetrical math that mirrors itself between -1, 1. The following is true for floor, ceil, and round: f(x) = -f(-x).
floor: "def(decimal num) -> int int(num)",

ceil: "def(decimal num) -> int int(num)+sign(num)",

round: "def(decimal num) -> int if(num <= 0,
	if(num <= (int(num) - 0.5), (int(num) - 1), int(num)),
	if(num >= (int(num) + 0.5), (int(num) + 1), int(num))
)",


//Easeing functions. Takes a percent (a decimal between 0 and 1) and makes it closer to either extreme, depending on where it is.
sin_in:     "def(decimal percent) -> decimal 1-cos(percent*90)",
sin_in_out: "def(decimal percent) -> decimal if(percent < 0.5, sin_in(percent*2)/2, sin_out((percent-0.5)*2)/2+0.5)",
sin_out:    "def(decimal percent) -> decimal sin(percent*90)",
linear:     "def(decimal percent) -> decimal percent",


//Calculate the angle between a point of some sort and another point. The four-arg version, accepting x1,y1,x2,y2, is to keep parity with the built-in angle function.
//This is a convenience function so you don't have to manually separate out the components of your points. It just uses the engine angle function.
angle: "overload(
	def(decimal x1, decimal y1, decimal x2, decimal y2) -> decimal angle(x1, y1, x2, y2),
	def([decimal] p1, [decimal] p2) -> decimal angle(p1[0], p1[1], p2[0], p2[1]),
	def(object|map p1, object|map p2) -> decimal angle(
		decimal <- default(decimal|null <- p1.mid_x, decimal|null <- p1.x), 
		decimal <- default(decimal|null <- p1.mid_y, decimal|null <- p1.y), 
		decimal <- default(decimal|null <- p2.mid_x, decimal|null <- p2.x), 
		decimal <- default(decimal|null <- p2.mid_y, decimal|null <- p2.y)),
	def(object|map p1, [decimal] p2) -> decimal angle(
		decimal <- default(decimal|null <- p1.mid_x, decimal|null <- p1.x), 
		decimal <- default(decimal|null <- p1.mid_y, decimal|null <- p1.y), p2[0], p2[1]),
	def([decimal] p1, object|map p2) -> decimal angle(p1[0], p1[1], 
		decimal <- default(decimal|null <- p2.mid_x, decimal|null <- p2.x), 
		decimal <- default(decimal|null <- p2.mid_y, decimal|null <- p2.y))
)",

_calc_length: "def(decimal x, decimal y, decimal u, decimal|int v) -> decimal hypot(lx, ly) where lx = x-u where ly = y-v",

length: "overload(
	def(decimal x, decimal y, decimal u, decimal v) -> decimal lib.math._calc_length(x,y,u,v),
	def([decimal] a, [decimal] b) -> decimal  lib.math._calc_length(a[0], a[1], b[0], b[1]),
	def(custom_obj a, [decimal] b) -> decimal  lib.math._calc_length(a.midpoint_x, a.midpoint_y, b[0], b[1]),
	def([decimal] a, custom_obj b) -> decimal  lib.math._calc_length(a[0], a[1], b.midpoint_x, b.midpoint_y),
	def(custom_obj a, custom_obj b) -> decimal  lib.math._calc_length(a.midpoint_x, a.midpoint_y, b.midpoint_x, b.midpoint_y)
)",

default: "def(decimal|null input, decimal|null fallback) -> decimal if(input is decimal,  input, fallback asserting fallback is decimal)",


//This function could use some love. It was just copy/pasted out of an ancient controller for curved ropes.
bezier_curve: "def([[decimal]] points, decimal percent_raw) 
	if(size(points) < 2,
		points[0], //Just return the point, no work to be done.
		if(size(points)=2, 
			[points[0][0]*(1-percent) + points[1][0]*percent, points[0][1]*(1-percent) + points[1][1]*percent], 
			bezier_curve([[decimal]] <- map(range(size(points)-1), 'ind', bezier_curve([[decimal]] <- points[ind:ind+2], percent)), percent)
	)) where percent = decimal(percent_raw) asserting size(points)",




test: [

	{
		assert: "map(range(11), lib.math.interpolate([1,3,1], value/10.0)) 
			= [1.0, 1.4, 1.8, 2.2, 2.6, 3.0, 2.6, 2.2, 1.8, 1.4, 1.0]"
	},{
		assert: "lib.math.interpolate({mid_x:100, mid_y:50}, 0.40, {mid_x:0, mid_y:-10})
			= {mid_x:60, mid_y:26}"
	},

	{
		assert: "lib.math.loop(360+45) = 45"
	},{
		assert: "lib.math.loop(-360+45) = 45"
	},{
		assert: "lib.math.loop(720+90) = 90"
	},{
		assert: "lib.math.loop(-720+90) = 90"
	},
	
	{
		assert: "lib.math.round(-5.4) = -5"
	},{
		assert: "lib.math.round(-5.5) = -6"
	},{
		assert: "lib.math.round(-5.6) = -6"
	},{
		assert: "lib.math.round( 5.4) =  5"
	},{
		assert: "lib.math.round( 5.5) =  6"
	},{
		assert: "lib.math.round( 5.6) =  6"
	},
	
	{
		assert: "lib.math.floor( 4.9) =  4"
	},{
		assert: "lib.math.floor( 4.2) =  4"
	},{
		assert: "lib.math.floor(-4.9) = -4"
	},{
		assert: "lib.math.floor(-4.2) = -4"
	},
	
	{
		assert: "lib.math.ceil( 4.9) =  5"
	},{
		assert: "lib.math.ceil( 4.2) =  5"
	},{
		assert: "lib.math.ceil(-4.9) = -5"
	},{
		assert: "lib.math.ceil(-4.2) = -5"
	},

	{
		//Since angle uses floating-point numbers under the hood, we'll not get back an exact answer.
		//Instead, we'll check that the difference between the expected result and the desired result is within a reasonable margin.
		assert: "abs(angle(1,2,3,4) - 45) < 0.0001"
	},{
		assert: "abs(lib.math.angle({x:10, y:5}, [0,5]) + 180) < 0.0001"
	}

],

}
