https://github.com/frogatto/frogatto/wiki/Style-Guide-for-2014
 ~ Coding Standards for FFL ~
      Condensed  Edition

Table of Contents:
1] Introduction
2] Preamble
3] Indentation
4] FFL
5] Objects

Introduction:
    Throughout Frogatto & Friends, a 'stardard style' may be found. At the time of writing, there is no guide beyond 'I feel this is right and good' to guide the community. This guide covers the style we use, and tries to identify what motive lays behind this. Style is dependant on syntax, which is defined by the Anura team and is not part of this document.

Preamble:
    This text is what, for the most part, what Jetrel and I have standardized on. It has been a highly experimental, iterative process – and, as such, previous code examples contradicting this guide may be widely found. For the most part, it is best to follow the internal style of an object than to reformat it. This document specifies the ideal, which may in cases be slightly removed from reality. Nonetheless, it is a good idea to have such a standard issued, upon which further discussions can be based. It may also serve as a basis for pretty-printers, in the future.
    Most of this document is merely the common sense of the situation writ down.

Indentation:
	It is preferred to indent with tabs. When indenting, try to make it so that changing the tab width would not affect the alignment of anything. This is sometimes called "smart tabs": use tabs for indentation, spaces for alignment. Since it doesn't matter how wide your tabs are, you are free to choose any width you feel like. You should indent in the way you feel best expresses the underlying structure of the code.
	Additional whitespace may be sprinkled in wherever the author feels it would be helpful.

AFL:
    The Anura Formula Language is a functional-based scripting language for our game engine. While you will get a feeling for layout by simply reading and writing it, here I will list some of the more interesting formatting tidbits.
    1) One idea per line, as long as it's a pretty short idea. There are no hard-and-fast column restrictions, but in general around 100 or 120 characters is a good soft maximum. This is conveniently how wide my sublime text window happens to be on this monitor. As always, just do what you think is the easiest for someone else to read in a few months.
    2) Comment why, not how. (Unless the how really isn't obvious. Then comment how, too.) Try to comment as much as you should, neither more nor less.
    3) Leave spaces around the outer brackets of a function if you do not put them on separate lines. This makes them easier to find.
    4) When listing something, such as commands, over multiple lines you should indent the contents of the list. This applies doubly when something is defined with a 'where' statement.

Objects:
    In general, when writing an object, it is easiest to copy from an existing object. When doing so, it is advised to bring the original object into adherence with the more important style directive – that of key order. While there are no absolute rules governing this, in general:
    1) The shortest values should go first. For example, id, zorder, and prototype are all very concise, so they should go at the start of the object file. The reason for this is that they tend to get a bit lost if they are beneath a series of long event handlers or properties.
    2) We introduce properties next, as they are relied upon by the event handlers. In general, it is a good idea to introduce stuff that will be used later before it is used. There is no clear standard I know of for arrangement of properties, as they are young yet. For many properties, leave some organizational comments, like in frogatto_playable.cfg, and things should be fine.
    3) Events should be organized in as logical an order as possible. This generally means putting events that lead to each other close to each other, and putting events that occur first earlier in the file.
    4) Animation definitions go after all event handlers. The proximity rule still applies here, so the 'on_anim_end' events go right before the animation definitions. Longer events go first, here, because the majority of the events are short and we want as much closeness to happen as possible.
    5) Sub-objects go after animations, because they are different objects and they shouldn't interrupt the definition of the parent object.
