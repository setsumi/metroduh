 

**********************************************************************************************************
on_process:"
	if(13 in ctrl_keys or ' ' in ctrl_keys,
		fire_event('finish_menu')
	)",


**********************************************************************************************************
on_create: "[set(platform_offsets,[0, -24, -24, 0]),
    spawn('fountain_of_health.running_water_overlay',midpoint_x-6*facing,midpoint_y-56,facing),
    spawn('sound_source_individual',mid_x,mid_y,{sound_file:'ambient/fountain-small.ogg'})]",


**********************************************************************************************************
Replaced some runtime casts in hittable with interfaces.

-  final_damage_amount: "def(obj hittable|{damage_type: string} collide_with, int damage_amount) -> int if((damage_amount < armor) or me.is_invincible, 0, handle_damage_type_modifications( string <- collide_with.damage_type, handle_base_damage_reductions( damage_amount )))",

+  final_damage_amount: "def(interface {damage_type: string} collide_with, int damage_amount) -> int if((damage_amount < armor) or me.is_invincible, 0, handle_damage_type_modifications(collide_with.damage_type, handle_base_damage_reductions( damage_amount )))",

**********************************************************************************************************
#onetime level controllers are like the regular type, except with respawns=no set.  Meaning that their script only happens once per playthrough.


**********************************************************************************************************
In level file:

"label": "nene_npc",
"on_freak_out": "transient_speech_dialog(self, [~If that gets in the batter,\\nI swear...~])",
"on_start_level": "begin_script('ants_in_house_check')",

#	"script": {
#		"id": "ants_in_house_check",
#		"modification": {
#			"on_leave_spit_anim": "if(can_see(level, me, get_object(level, 'nene_npc')) and me.swallowed and 
#									(me.swallowed.basic_type in
#									['ant_black','ant_red','ant_gold','ant_platform_red']),
#										fire_event(get_object(level,'nene_npc'),'freak_out'))",
#			"target": "level.player"
#		}
#	},

**********************************************************************************************************
elastic_collision() ???

**********************************************************************************************************
 Made throwable objects respect cooldowns - switched cooldowns to depending on the level.cycle, rather than cycle, because it turns out a short-lived thrown object, upon comparing to itself, may (almost certainly will at point-blank range) have a value for cycles less than the value of the cooldown. Thrown objects now behave correctly for damage types.

**********************************************************************************************************
	damage_tables: "{ string -> {neutral:decimal, fire:decimal, energy:decimal, acid:decimal, impact:decimal, lacerate:decimal} } ::
						{	
							'bug' : {		neutral: 1.0,
											fire: 0.75,
											energy: 1.0,
											acid: 1.25,
											impact: 2.0,
											lacerate: 0.25
									},
							'plant' : {		neutral: 1.0,
											fire: 1.0,
											energy: 0.5,
											acid: 0.25,
											impact: 0.0,
											lacerate: 0.5
									},
							'mushroom' : {		neutral: 1.0,
											fire: 1.0,
											energy: 1.5,
											acid: 0.0,
											impact: 0.0,
											lacerate: 1.0
									},
							'stone' : {		neutral: 1.0,
											fire: 0.0,
											energy: 0.1,
											acid: 2.0,
											impact: 1.0,
											lacerate: 0.0
									},
							'milgramen' : {		neutral: 1.0,
											fire: 0.75,
											energy: 1.0,
											acid: 0.75,
											impact: 1.0,
											lacerate: 1.0
									},
							'fish' : {		neutral: 1.0,
											fire: 0.0,
											energy: 1.5,
											acid: 0.5,
											impact: 0.5,
											lacerate: 1.0
									},
							'mechanical' : {	neutral: 1.0,
											fire: 0.0,
											energy: 1.0,
											acid: 1.5,
											impact: 0.5,
											lacerate: 0.0

									},
							'spectral' : {		neutral: 1.0,
											fire: 0.0,
											energy: 1.0,
											acid: 0.0,
											impact: 0.0,
											lacerate: 0.0

									},
							'mammal' : {		neutral: 1.0,
											fire: 1.0,
											energy: 0.5,
											acid: 1.5,
											impact: 1.0,
											lacerate: 1.0

									},
							'bird' : {		neutral: 1.0,
											fire: 0.5,
											energy: 0.5,
											acid: 0.5,
											impact: 1.0,
											lacerate: 1.5

									},
						}",
										



	death_fx_table: "{string->string} :: {
						'bug':			'bug', 
						'plant':		'plant', 
						'mushroom':		'mushroom',
						'mammal':		'animal', 
						'bird':			'animal', 
						'fish':			'animal', 
						'milgramen':	'milgramen',
						'stone':		'medium',
						'mechanical':	'medium',
						'spectral':		'medium',
					}",
					
					
**********************************************************************************************************
map(map_points, spawn('text_controller', value.x*2, value.y*2 + 40, facing,
                            [set(vars.txt, value.level_prettyname),set(vars.align, 'center')])),

**********************************************************************************************************
definition:
elastic_collision: "def( obj hittable the_other_object, {multiplier: decimal, constraint: {min: decimal, max: decimal}|null} params ) -> commands
  ([set(velocity_x, radius * cos(angle)), set(velocity_y, radius * sin(angle))]
  where angle = lib.math.angle(the_other_object, me) where radius = if(params.constraint, lib.math.constrain(params.constraint.min, params.multiplier * velocity_magnitude , params.constraint.max), params.multiplier * velocity_magnitude) )  where velocity_magnitude = hypot(velocity_x,velocity_y)",

call:
elastic_collision(collide_with, {multiplier: 0.5, constraint: {min: 0, max: 1500} } )

**********************************************************************************************************
properties: {
        altitude_adjustment: "(wave(cycle*5+1000)/30)",  // <-- Executes every cycle!!!
},

**********************************************************************************************************
lib2d access and type conversion
lib.math.round(1.5)

round: "def(decimal num) -> int if(num <= 0,
	if(num <= (int(num) - 0.5), (int(num) - 1), int(num)),
	if(num >= (int(num) + 0.5), (int(num) + 1), int(num))
)",

**********************************************************************************************************
on_create: "[add_particles('bubbles'), add_particles('fizz')]",
animation: {
  id: "normal",
  frames: 1,
  duration: 50,
},
particle_system: [
	{
		id: "bubbles",
		type: "water",
		number_of_particles: 100,
		repeat_period: 200,
		velocity_y: -1,
		velocity_x: 0,
		velocity_rand: 4,
		dot_size: 2,
		color: [120,250,200,200],
	},
	{
		id: "fizz",
		type: "simple",
		spawn_rate: 600,
		time_to_live: 80,
		min_x: -60,
		max_x: 260,
		min_y: -15,
		max_y: 15,
		velocity_y: -200,
		velocity_x: 260,
		velocity_x_random: 200,
		velocity_y_random: 400,
		accel_y: -10,
		delta_a: 2,
		animation: {
			id: "sparkle",
			image: "effects/particles.png",
			rect: [3,93,9,99],
			pad: 3,
			frames: 5,
			frames_per_row: 5,
			scale: 2,
			duration: 8,
		},
	},
],

**********************************************************************************************************
move_to_standing() // move down until standing on surface

**********************************************************************************************************
serializable: false,
dies_on_inactive: true,

**********************************************************************************************************
sound_file: { type: "string|null", default: null, editor_info: { type: "enum", enum_values: @eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value) } },

**********************************************************************************************************
debug('Are we locked? ${is_locked}')

**********************************************************************************************************
spawn parameters note
[spawn('explosion_big',  mid_x + 1d50 - 1d50, mid_y + 1d70 - 1d70, -facing),sound('BombExplode.wav')]),
[spawn('explosion_big',  mid_x + 1d50 - 1d50, mid_y + 1d70 - 1d70, {facing:-facing, rotate: -45}),sound('BombExplode.wav')]),

**********************************************************************************************************
In level

			"label": "boss_fight_controller",
			"on_create": "if(level.player.get_stored_event('dungeon_crawling_faux_boss_fight_won'), [
				remove_object(get_object(level,'robot_kitty')),
				remove_object(me),
			])",
			"on_triggered": "if(not level.player.get_stored_event('dungeon_crawling_faux_boss_fight_won'),
			[
				map(level.gui, set(value.vars.bosses, value.vars.bosses + [get_object(level,'robot_kitty')])),
				fire_event(get_object(level, 'gate1'), 'lock'),
				music('neoBoss.ogg')
			])",
			"time_in_frame": 0,
			"type": "level_controller",

**********************************************************************************************************
level.camera_position
[2244, 0, 800, 600]     <-- x, y, width, height

level.camera_target
[224500, 9200]

level.camera
OUTPUT: (0852D810){screen_to_world: (08772688)(, , , ),
position: [0.0, 0.0, 10.0],
speed: 0.1,
right: [1.0, 0.0, 0.0],
direction: [0.0, 0.0, -1.0],
horizontal_angle: 3.141592,
hangle: 3.141592,
vertical_angle: 0.0,
vangle: 0.0,
mouse_speed: 0.004999,
target: [0.0, 0.0, 9.0],
up: [0.0, 1.0, 0.0],
fov: 45.0,
aspect: 1.333333,
clip_planes: [0.1, 300.0],
type: 'perspective',
ortho_window: [0, 800, 600, 0]}

**********************************************************************************************************
custom_object_type::custom_object_type(const std::string& id, variant node, const custom_object_type* base_type, const custom_object_type* old_type)
  : id_(id),
	hitpoints_(node["hitpoints"].as_int(1)),
	timer_frequency_(node["timer_frequency"].as_int(-1)),
	zorder_(node["zorder"].as_int()),
	zsub_order_(node["zsub_order"].as_int()),
	is_human_(node["is_human"].as_bool(false)),
	goes_inactive_only_when_standing_(node["goes_inactive_only_when_standing"].as_bool(false)),
	dies_on_inactive_(node["dies_on_inactive"].as_bool(false)),
	always_active_(node["always_active"].as_bool(false)),
	body_harmful_(node["body_harmful"].as_bool(true)),
	body_passthrough_(node["body_passthrough"].as_bool(false)),
	ignore_collide_(node["ignore_collide"].as_bool(false)),
	object_level_collisions_(node["object_level_collisions"].as_bool(false)),
	surface_friction_(node["surface_friction"].as_int(100)),
	surface_traction_(node["surface_traction"].as_int(100)),
	friction_(node["friction"].as_int()),
	traction_(node["traction"].as_int(1000)),
	traction_in_air_(node["traction_in_air"].as_int(0)),
	traction_in_water_(node["traction_in_water"].as_int(0)),
	respawns_(node["respawns"].as_bool(true)),
	affected_by_currents_(node["affected_by_currents"].as_bool(false)),
	is_vehicle_(node["vehicle"].as_bool(false)),	
	passenger_x_(node["passenger_x"].as_int()),
	passenger_y_(node["passenger_y"].as_int()),
	feet_width_(node["feet_width"].as_int(0)),
	use_image_for_collisions_(node["use_image_for_collisions"].as_bool(false)),
	static_object_(node["static_object"].as_bool(use_image_for_collisions_)),
	collides_with_level_(node["collides_with_level"].as_bool(true)),
	has_feet_(node["has_feet"].as_bool(true) && static_object_ == false),
	adjust_feet_on_animation_change_(node["adjust_feet_on_animation_change"].as_bool(true)),
	teleport_offset_x_(node["teleport_offset_x"].as_int()),
	teleport_offset_y_(node["teleport_offset_y"].as_int()),
	no_move_to_standing_(node["no_move_to_standing"].as_bool()),
	reverse_global_vertical_zordering_(node["reverse_global_vertical_zordering"].as_bool(false)),
	serializable_(node["serializable"].as_bool(true)),
	solid_(solid_info::create(node)),
	platform_(solid_info::create_platform(node)),
	solid_platform_(node["solid_platform"].as_bool(false)),
	has_solid_(solid_ || use_image_for_collisions_),
	solid_dimensions_(has_solid_ || platform_ ? 0xFFFFFFFF : 0),
	collide_dimensions_(0xFFFFFFFF),
	weak_solid_dimensions_(has_solid_ || platform_ || node["has_platform"].as_bool(false) ? 0xFFFFFFFF : 0),
	weak_collide_dimensions_(0xFFFFFFFF),
	activation_border_(node["activation_border"].as_int(100)),
	editor_force_standing_(node["editor_force_standing"].as_bool(false)),
	hidden_in_game_(node["hidden_in_game"].as_bool(false)),
	stateless_(node["stateless"].as_bool(false)),
	platform_offsets_(node["platform_offsets"].as_list_int_optional()),
	slot_properties_base_(-1), 
	use_absolute_screen_coordinates_(node["use_absolute_screen_coordinates"].as_bool(false)),
	mouseover_delay_(node["mouseover_delay"].as_int(0)),
	is_strict_(!g_suppress_strict_mode && node["is_strict"].as_bool(custom_object_strict_mode)),
	is_shadow_(node["is_shadow"].as_bool(false)),
	true_z_(node["truez"].as_bool(false)), tx_(node["tx"].as_decimal().as_float()), 
	ty_(node["ty"].as_decimal().as_float()), tz_(node["tz"].as_decimal().as_float())
